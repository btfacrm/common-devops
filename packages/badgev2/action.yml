name: Create a code badge
description: Create a code badge
inputs:
  label:
    required: true
    description: label for badge
  status:
    required: true
    description: Text status for the badge
  color:
    required: true
    description: Badge color
  file:
    required: true
    description: Name of the badge file
  folder:
    required: true
    description: Folder to save the file

runs:
  using: "composite"
  steps:
    
    - name: Create code badge
      shell: bash
      run: |
        echo " "
        echo "*****************************************************"
        echo "Create code badge"
        echo "*****************************************************"
        echo " "
        echo "  Create the badge file and get it as base64"
        echo " "

        curl -o ${{ inputs.file }} --verbose --get \
          --data-urlencode 'label=${{ inputs.label }}' \
          --data-urlencode 'message=${{ inputs.status }}' \
          --data-urlencode 'color=${{ inputs.color }}' \
          'https://img.shields.io/static/v1'
        echo " " >> ${{ inputs.file }}

        content_base64=$(base64 -w 0 ${{ inputs.file }})
        cat ${{ inputs.file }}

        echo " "
        echo "  content_base64=$content_base64"
        echo " "
   
        url="https://api.github.com/repos/${{github.repository_owner}}/$badge_repository/contents/${{ inputs.folder }}/${{ inputs.file }}"
        echo "  badge url: $url"
        file_details=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ env.github_automationbot_token }}" \
            $url)

        if [[ $file_details == *"Not Found"* ]]; then
          message="Create badge ${{ inputs.folder }}/${{ inputs.file }}"
          echo "  $message"

          curl -s -X PUT \
            -H "Authorization: token ${{ env.github_automationbot_token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"message": "'"$message"'", "content": "'"$content_base64"'", "branch": "main"}' \
            "$url"
        else
          sha=$(echo "$file_details" | jq -r '.sha')
          message="Update badge ${{ inputs.file }}/${{ inputs.file }}"
          echo "  $message, sha: $sha"
          
          curl -s -X PUT \
            -H "Authorization: token ${{ env.github_automationbot_token }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d '{"message": "'"$message"'", "sha": "'"$sha"'", "content": "'"$content_base64"'", "branch": "main"}' \
            "$url"
        fi