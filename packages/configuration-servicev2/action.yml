name: 'Get global configuration'
description: 'Get the global configuration and secrets from Azure KeyVault'
inputs:
  environment:
    required: true
    description: Get the configuration for the specified environment
  debug:
    required: false
    type: boolean
    default: false
    description: Flag to debug this action, default is false

runs:
  using: "composite"
  steps:

    - name: Get service metadata from pom.xml
      shell: bash
      run: |
        echo " "
        echo "Configuration for environment: ${{ inputs.environment }} "
        echo " "
        echo "**************************************"
        echo "Getting service metadata from pom.xml "
        echo "**************************************"
        echo " "
        echo "Install XMLStarlet in Ubuntu"
        sudo apt-get install xmlstarlet --fix-missing        
        echo " "
        echo "xmlstarlet --version"
        xmlstarlet --version
        echo " "
        echo "Get info from pom.xml"
        servicename=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:name" pom.xml )
        serviceversion=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:version" pom.xml )
        servicegroup=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:groupId" pom.xml )
        serviceartifact=$( xmlstarlet sel -N x=http://maven.apache.org/POM/4.0.0 -t -v "/x:project/x:artifactId" pom.xml )
        echo " "
        echo "Create environment variables with pom data"
        echo "service_name=$servicename" >> $GITHUB_ENV
        echo "service_version=$serviceversion" >> $GITHUB_ENV
        echo "service_group=$servicegroup" >> $GITHUB_ENV
        echo "service_artifact=$serviceartifact" >> $GITHUB_ENV
        echo " "
        echo "Variables generated based on pom.xml:"
        echo "  service_name= "$servicename
        echo "  service_version= "$serviceversion          
        echo "  service_group= "$servicegroup
        echo "  service_artifact= "$serviceartifact
        echo " "

    - name: Get configuration files
      uses: btfacrm/common-devops/packages/get-file@main
      with:
        file: "$GLOBAL_CONFIGURATION $service_name.yml"

    - name: DEBUG - Cat global.yml
      shell: bash
      run: |
        echo " "
        echo "*********************************************"      
        echo "CAT global.yml"
        echo "*********************************************"
        echo " "
        cat $GLOBAL_CONFIGURATION
        echo " "
        echo " "

    - name: Import variables from _global.yml
      uses: zlatko-ms/envarfiles@main
      with:
        paths: ${{ env.GLOBAL_CONFIGURATION }}

    - name: DEBUG - Show global variables
      shell: bash
      run: |
        echo " "
        echo "*********************************************"      
        echo "DEBUG variables from global.yml"
        echo "*********************************************"
        echo " "
        echo "Configuration variables:"
        echo "  github_deploymentproject= $github_deploymentproject"
        echo "  github_deployeruser= $github_deployeruser"
        echo "  github_gist_path= $github_gist_path"
        echo "  salesforcesapi_dev= $salesforcesapi_dev"
        echo "  salesforcesapi_prd= $salesforcesapi_prd"
        echo "  testvar1= $testvar1"
        echo "  testvar2= $testvar2"

    
    - name: Get configuration parameters for the service
      shell: bash
      run: |
        echo " "
        echo "**************************************************"
        echo "Get variables from the service configuration file "
        echo "**************************************************"
        echo " "
        pathdata=""
        function parse_yaml {
          pathdata=$(cat "$service_name.yml" | yq -r "$1")
          if [ "$pathdata" = "null" ] ; then
            echo " The yaml section was not found in the configuration file, section=$1"
            exit 1
          fi
        }
        
        echo "  Getting main configuration"
        parse_yaml '.settings'; echo "configuration_settings=$pathdata" >> $GITHUB_ENV
        parse_yaml '.skiptests'; echo "configuration_skiptest=$pathdata" >> $GITHUB_ENV
        parse_yaml '.environments'; echo "configuration_environments=$pathdata" >> $GITHUB_ENV
        parse_yaml '.test-properties'; echo "configuration_test_properties=$pathdata" >> $GITHUB_ENV

        if [ "${{ inputs.environment }}" != "buld" ] ; then
          echo "  Getting ${{ inputs.environment }} configuration"
          parse_yaml ".${{ inputs.environment }}.deployment.name"; echo "configuration_deployment_name=$pathdata" >> $GITHUB_ENV
          parse_yaml ".${{ inputs.environment }}.deployment.organization"; echo "configuration_deployment_organization=$pathdata" >> $GITHUB_ENV
          parse_yaml ".${{ inputs.environment }}.deployment.host"; echo "configuration_deployment_host=$pathdata" >> $GITHUB_ENV
          parse_yaml ".${{ inputs.environment }}.deployment.type"; echo "configuration_deployment_type=$pathdata" >> $GITHUB_ENV
          parse_yaml ".${{ inputs.environment }}.deployment.customlogger"; echo "configuration_deployment_customlogger=$pathdata" >> $GITHUB_ENV
          parse_yaml ".${{ inputs.environment }}.cloudhub"; echo "configuration_cloudhub=$pathdata" >> $GITHUB_ENV
          parse_yaml ".${{ inputs.environment }}.bat"; echo "configuration_bat=$pathdata" >> $GITHUB_ENV
        fi        

    - name: Generate environment variables for BAT
      id: generate-service-env-variables
      if: ${{ inputs.environment != 'build' }}
      shell: bash
      run: |
        echo " "
        echo "***********************************************"
        echo "Generate environment variables for BAT         "
        echo "***********************************************"
        echo " "

        if [ "$configuration_bat" = "null" ] || [ "$configuration_bat" = "" ] ; then
          echo "  There are no environment variables for bat!"
        else
          service_configuration_lines=$( echo $configuration_bat | tr ' ' '\n' )
          echo -e "  Configuration formated:\n$service_configuration_lines "
          echo " "

          echo "  Variables found: "
          echo "$service_configuration_lines" | while read p; do

            # Get variable and value
            line=$(echo "$p")
            name="$(cut -d'=' -f1 <<<$line)"
            value="$(cut -d'=' -f2 <<< $line)"
            echo "    - name: "$name
            echo "      value: "$value

            # Override the value with a possible environment variable
            value_fromvariable=$(eval "echo $value")
            echo "      new value: "$value_fromvariable
            echo "$name=$value_fromvariable" >> $GITHUB_ENV
          done          
        fi

    - name: DEBUG - Show variables
      shell: bash
      run: |
        echo " "
        echo "*********************************************"      
        echo "DEBUG variables"
        echo "*********************************************"
        echo " "
        echo "Configuration variables:"
        echo "  configuration_settings= "$configuration_settings
        echo "  configuration_skiptest= "$configuration_skiptest          
        echo "  configuration_environments= "$configuration_environments
        echo "  configuration_deployable= "$configuration_deployable
        echo "  configuration_test_properties= "$configuration_test_properties
        echo "  configuration_deployment_name= "$configuration_deployment_name
        echo "  configuration_deployment_organization= "$configuration_deployment_organization
        echo "  configuration_deployment_host= "$configuration_deployment_host
        echo "  configuration_deployment_customlogger= "$configuration_deployment_customlogger
        echo "  configuration_deployment_type= "$configuration_deployment_type
        echo "  configuration_cloudhub= "$configuration_cloudhub
        echo "  configuration_env= "$configuration_env