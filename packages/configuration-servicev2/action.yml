name: 'Get global configuration'
description: 'Get the global configuration and secrets from Azure KeyVault'
inputs:
  environment:
    required: true
    description: Get the configuration the the specified environment
    type: choice
    options:
    - dev
    - tst
    - prd
    - unit-test
  debug:
    required: false
    type: boolean
    default: false
    description: Flag to debug this action, default is false

runs:
  using: "composite"
  steps:

    - name: DEBUG - Show variables
      shell: bash
      run: |
        echo " "
        echo "*********************************************"      
        echo "DEBUG variables"
        echo "*********************************************"
        echo " "

        tempvar=$( echo "${{secrets.GH_ADMINTASKS_ACCESSTOKEN}}" | sed 's/./& /g' )
        echo "  GH_ADMINTASKS_ACCESSTOKEN: $tempvar"
        echo "  configurations-repository: $CONFIGURATIONS_REPOSITORY"
        echo "  environment: ${{ inputs.environment }}"
        
        # Set environment variables
        echo "github_admintasks_accesstoken=${{secrets.GH_ADMINTASKS_ACCESSTOKEN}}" >> $GITHUB_ENV

        # Show environment variables
        echo "github_admintasks_accesstoken: $github_admintasks_accesstoken"


    - name: Get global configuration
      env:
        SECRET_MAP_FILE: _global.yml
      shell: bash
      run: |
        echo " "
        echo "*********************************************"
        echo "Get global configuration"
        echo "*********************************************"

        echo "github_admintasks_accesstoken: $github_admintasks_accesstoken"

        # Get the configuration file from the github repository
        urlconfigurationfile="https://raw.githubusercontent.com/${{ github.repository_owner }}/$CONFIGURATIONS_REPOSITORY/main/$SECRET_MAP_FILE"
        echo "Getting the secrets mapping file: $urlconfigurationfile"
        initialsecretconfiguration=$(curl -sH "Authorization: token $github_admintasks_accesstoken" $urlconfigurationfile)

        # Verify if configuration file was found
        if [[ $configurationdata != *"Not Found"* ]]; then
          echo "A configuration file for the service was found"
          
          # Write the configuration file in the filesystem
          echo "$initialsecretconfiguration" > global.yml
        else
          echo "No configuration file found, returning an empty file"
          touch global.yml
        fi

    - name: Import variables from global.yml
      uses: zlatko-ms/envarfiles@main
      with:
        paths: global.yml

    - name: DEBUG - Show variables
      shell: bash
      run: |
        echo " "
        echo "*********************************************"      
        echo "DEBUG variables"
        echo "*********************************************"
        echo " "
        echo "jks_dev_alias: $jks_dev_alias"
