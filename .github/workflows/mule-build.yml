##########################################################################
# CICD Pipeline - Build Mulesoft Application
##########################################################################

name: Build
on:
  workflow_call:

env:
  CONFIGURATIONS_REPOSITORY: common-configurations
  GLOBAL_CONFIGURATION: _global.yml
  
jobs:

  Build:
    name: Build
    runs-on: ubuntu-latest

    # Assigning permissions to jobs - https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    permissions:
      actions: write
      checks: write
      contents: write
      deployments: write
      id-token: write
      issues: write
      discussions: write
      packages: write
      pages: write
      pull-requests: write
      repository-projects: write
      security-events: write
      statuses: write

    steps:

      - name: Create a GitHub App installation access token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ secrets.BTFACRM_GITHUB_AUTOMATIONBOT_APPID }}
          private-key: ${{ secrets.BTFACRM_GITHUB_AUTOMATIONBOT_PEM }}

      - name: Verify app token
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Verify App token"
          echo "***********************************************"
          echo " "
          echo " App token: ${{ steps.app-token.outputs.token }}"
          echo "github_automationbot_token=${{ steps.app-token.outputs.token }}" >> $GITHUB_ENV

      - name: Get secrets from Github
        uses: kanga333/variable-mapper@master
        with:
          key: "master"
          map: |
            {
              "master": {
                  "btfacrm_anypoint_environment_dev_clientid": "${{ secrets.BTFACRM_ANYPOINT_ENVIRONMENT_DEV_CLIENTID }}",
                  "btfacrm_anypoint_environment_dev_secret": "${{ secrets.BTFACRM_ANYPOINT_ENVIRONMENT_DEV_SECRET }}",
                  "btfacrm_anypoint_environment_prd_clientid": "${{ secrets.BTFACRM_ANYPOINT_ENVIRONMENT_PRD_CLIENTID }}",
                  "btfacrm_anypoint_environment_prd_secret": "${{ secrets.BTFACRM_ANYPOINT_ENVIRONMENT_PRD_SECRET }}",

                  "btfacrm_apisalesforce_dev_clientsecret": "${{ secrets.BTFACRM_APISALESFORCE_DEV_CLIENTSECRET }}",
                  "btfacrm_apisalesforce_dev_clientid": "${{ secrets.BTFACRM_APISALESFORCE_PRD_CLIENTID }}",
                  "btfacrm_apisalesforce_prd_clientid": "${{ secrets.BTFACRM_HTTPS_DEV_JKSKEYPASSWORD }}",
                  "btfacrm_apisalesforce_prd_clientsecret": "${{ secrets.BTFACRM_APISALESFORCE_PRD_CLIENTSECRET }}",

                  "cicd_connectedapp_clientid": "${{ secrets.BTFACRM_CICD_CONNECTEDAPP_CLIENTID }}",
                  "cicd_connectedapp_secret": "${{ secrets.BTFACRM_CICD_CONNECTEDAPP_SECRET }}",

                  "github_gist_accesstoken": "${{ secrets.BTFACRM_GITHUB_GIST_ACCESSTOKEN }}",
                  "github_admintasks_accesstoken": "${{ secrets.BTFACRM_GITHUB_ADMINTASKS_ACCESSTOKEN }}",

                  "btfacrm_https_dev_jkspath": "${{ secrets.BTFACRM_HTTPS_DEV_JKSPATH }}",
                  "btfacrm_https_dev_jksalias": "${{ secrets.BTFACRM_HTTPS_DEV_JKSALIAS }}",
                  "btfacrm_https_dev_jkskeypassword": "${{ secrets.BTFACRM_HTTPS_DEV_JKSKEYPASSWORD }}",
                  "btfacrm_https_prd_jkspath": "${{ secrets.BTFACRM_HTTPS_PRD_JKSPATH }}",
                  "btfacrm_https_prd_jksalias": "${{ secrets.BTFACRM_HTTPS_PRD_JKSALIAS }}",
                  "btfacrm_https_prd_jkskeypassword": "${{ secrets.BTFACRM_HTTPS_PRD_JKSKEYPASSWORD }}",

                  "btfacrm_mssql_dev_host": "${{ secrets.BTFACRM_MSSQL_DEV_HOST }}",
                  "btfacrm_mssql_dev_port": "${{ secrets.BTFACRM_MSSQL_DEV_PORT }}",
                  "btfacrm_mssql_dev_user": "${{ secrets.BTFACRM_MSSQL_DEV_USER }}",
                  "btfacrm_mssql_dev_password": "${{ secrets.BTFACRM_MSSQL_DEV_PASSWORD }}",
                  "btfacrm_mssql_dev_database": "${{ secrets.BTFACRM_MSSQL_DEV_DATABASE }}",

                  "btfacrm_mssql_prd_host": "${{ secrets.BTFACRM_MSSQL_PRD_HOST }}",
                  "btfacrm_mssql_prd_port": "${{ secrets.BTFACRM_MSSQL_PRD_PORT }}",
                  "btfacrm_mssql_prd_user": "${{ secrets.BTFACRM_MSSQL_PRD_USER }}",
                  "btfacrm_mssql_prd_password": "${{ secrets.BTFACRM_MSSQL_PRD_PASSWORD }}",
                  "btfacrm_mssql_prd_database": "${{ secrets.BTFACRM_MSSQL_PRD_DATABASE }}",

                  "mulesoft_nexus_ee_user": "${{ secrets.BTFACRM_MULESOFT_NEXUS_EE_USER }}",
                  "mulesoft_nexus_ee_password": "${{ secrets.BTFACRM_MULESOFT_NEXUS_EE_PASSWORD }}",

                  "btfacrm_salesforce_dev_storepassword": "${{ secrets.BTFACRM_SALESFORCE_DEV_STOREPASSWORD }}",
                  "btfacrm_salesforce_dev_principal": "${{ secrets.BTFACRM_SALESFORCE_DEV_PRINCIPAL }}",
                  "btfacrm_salesforce_dev_consumerkey": "${{ secrets.BTFACRM_SALESFORCE_DEV_CONSUMERKEY }}",
                  "btfacrm_salesforce_dev_keystore": "${{ secrets.BTFACRM_SALESFORCE_DEV_KEYSTORE }}",
                  "btfacrm_salesforce_dev_audienceurl": "${{ secrets.BTFACRM_SALESFORCE_DEV_AUDIENCEURL }}",
                  "btfacrm_salesforce_dev_tokenendpoint": "${{ secrets.BTFACRM_SALESFORCE_DEV_TOKENENDPOINT }}",
                  "btfacrm_salesforce_dev_certificatealias": "${{ secrets.BTFACRM_SALESFORCE_DEV_CERTIFICATEALIAS }}",

                  "btfacrm_salesforce_prd_storepassword": "${{ secrets.BTFACRM_SALESFORCE_PRD_STOREPASSWORD }}",
                  "btfacrm_salesforce_prd_principal": "${{ secrets.BTFACRM_SALESFORCE_PRD_PRINCIPAL }}",
                  "btfacrm_salesforce_prd_consumerkey": "${{ secrets.BTFACRM_SALESFORCE_PRD_CONSUMERKEY }}",
                  "btfacrm_salesforce_prd_keystore": "${{ secrets.BTFACRM_SALESFORCE_PRD_KEYSTORE }}",
                  "btfacrm_salesforce_prd_tokenendpoint": "${{ secrets.BTFACRM_SALESFORCE_PRD_TOKENENDPOINT }}",
                  "btfacrm_salesforce_prd_audienceurl": "${{ secrets.BTFACRM_SALESFORCE_PRD_AUDIENCEURL }}",
                  "btfacrm_salesforce_prd_certificatealias": "${{ secrets.BTFACRM_SALESFORCE_PRD_CERTIFICATEALIAS }}"
              }
            }
          
      # Environment variable 'github_admintasks_accesstoken' must be configured to run the action
      - name: Get service configuration
        uses: btfacrm/common-devops/packages/configuration-servicev3@main
      
      - name: Verify if the github tag exists
        if: "!contains(env.service_version, 'snapshot')"
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Verify if github tag exists "
          echo "***********************************************"
          echo " "

          tag_exist=$(git tag $service_version)
          if [ "$tag_exist" != "" ] ; then
            echo "  Error, the tag already exists in Github; bump up the application version in the POM file"
            exit 1
          else
            echo "  Create tag $service_version for the respository"
          fi
          echo " "
          
      - name: Install Java JDK for Mulesoft Applications
        uses: btfacrm/common-devops/packages/install-java@main
        with:
          github-configurations-accesstoken: $github_admintasks_accesstoken
          default-settings-xml: $configurations_settings

      - name: Setup Anypoint Exchange directories
        run: |
          echo " "
          echo "***********************************************"
          echo "Setup Anypoint Exchange directories"
          echo "***********************************************"
          echo " "
          echo "  Configuring the directory for Anypoint Exchange documentation"
          if [ -d "exchange-docs" ]; then
            echo "    Directory exchange-docs exists and will not be overriden with README.md" 
          else
            echo "    Creating directory 'exchange-doc' with home.md from README.md"
            mkdir -p exchange-docs
            mkdir -p exchange-docs/docs
            cp -Rfpv README.md exchange-docs/home.md
            cp -Rfpv docs/*.* exchange-docs/docs 
          fi
          echo " "
        
      - name: Compile code    
        run: mvn --batch-mode compile
  
      - name: Run test cases and package
        id: run-test-cases
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Run test cases and package"
          echo "***********************************************"
          echo " "
          skiptests=" "
          if [[ "${{env.configuration_skiptests}}" == "true" ]]; then
            skiptests="-DskipTests"
            echo "  Tests will be skipped"
          else
            echo "  The application will be tested"
          fi
          mvn --batch-mode $skiptests package $configuration_test_properties

      - name: Summary - Test
        uses: btfacrm/common-devops/packages/summary-junit@main
        with:
          badge-label: Unit test
          badge-suffix: ut
          path-report: 'target/surefire-reports/*.xml'
          path-directoryreports: 'target/surefire-reports/*'

      - name: Summary - Code Coverage
        uses: btfacrm/common-devops/packages/summary-codecoverage@main
      


      #########################################################
      # Next actions only if application is not a snapshot
      #########################################################
      
      - name: Deploy to anypoint exchange
        if: "!contains(env.service_version, 'snapshot')"
        run: |
          echo " "
          echo "***********************************************"
          echo "Deploy to Anypoint Exchange"
          echo "***********************************************"        
          echo " "
          mvn --batch-mode deploy -DskipTests

      - name: Tag repository with service version
        if: "!contains(env.service_version, 'snapshot')"
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Tag repository with service version "
          echo "***********************************************"
          echo " "
          git push origin $service_version
          
      - name: Create a release
        uses: ncipollo/release-action@v1
        if: "hashFiles('target/*.jar') != '' && !contains(env.service_version, 'snapshot')"
        with: 
          artifacts: "target/*.jar"
          artifactErrorsFailBuild: true
          makeLatest: true
          tag: ${{ env.service_version }}
          name: ${{ env.service_version }}

      - name: Create badge for workflow number
        uses: btfacrm/common-devops/packages/badge@main
        if: "!contains(env.service_version, 'snapshot')"
        with:
          label: Build job
          status: '${{ github.run_number }}'
          color: '535597'
          file: ${{ env.service_name }}-wf.svg
      
      - name: Create badge release only for jar files
        uses: btfacrm/common-devops/packages/badge@main
        if: "hashFiles('target/*.jar') != '' && !contains(env.service_version, 'snapshot')"
        with:
          label: Release
          status: '${{ env.service_version }}'
          color: '535597'
          file: ${{ env.service_name }}-re.svg

      - name: Create the deployment issue
        id: issue-create  
        if: "env.configuration_environments != '' && !contains(env.service_version, 'snapshot')"
        env:
          GITHUB_TOKEN: ${{ env.github_automationbot_token }}
        shell: bash
        run: |
          echo " "
          echo "***********************************************"
          echo "Create the deployment Issue "
          echo "***********************************************"
          echo " "
          echo "  Create issue for deployment in the first environment from list: $configuration_environments"

          # Environment list to an array
          read -a array <<< "$configuration_environments"
          echo "  Environment to deploy the application: ${array[0]}"
          gh -R "${{ github.repository }}" issue create \
              -t "Deployment ${array[0]} ${{ env.service_name }} ${{ env.service_version }}" \
              -a "${{ env.github_deployeruser }}" \
              -b "The build job triggered this issue" \
              -l "deployment"
